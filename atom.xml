<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://conceal.name</id>
    <title>常名斋</title>
    <updated>2020-01-02T10:07:06.848Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://conceal.name"/>
    <link rel="self" href="https://conceal.name/atom.xml"/>
    <subtitle>万物有名，常名斋，藏名斋。</subtitle>
    <logo>https://conceal.name/images/avatar.png</logo>
    <icon>https://conceal.name/favicon.ico</icon>
    <rights>All rights reserved 2020, 常名斋</rights>
    <entry>
        <title type="html"><![CDATA[周报 2019.12.23-2019.12.27]]></title>
        <id>https://conceal.name/post/zhou-bao-20191223-20191227</id>
        <link href="https://conceal.name/post/zhou-bao-20191223-20191227">
        </link>
        <updated>2019-12-27T03:31:01.000Z</updated>
        <summary type="html"><![CDATA[<p><em>封面图作者: zip</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>封面图作者: zip</em></p>
<!-- more -->
<h2 id="新闻">新闻</h2>
<ul>
<li>
<p><a href="https://v8.dev/blog/v8-release-80">JavaScript引擎V8发布v8.0版本</a></p>
<p>12月18日，JavaScript引擎V8发布v8.0版本，此版本除了修复一些 bug外，还带来了性能的提高。该版本通过指针压缩，将唯一的低位存储到堆中即可节省内存资源。经过测试，平均节省40％ 的堆内存。更多详情，可从官方渠道了解更多。目前该版本是预览版，正式版将于几个星期后随 Chrome 80 Stable 一起发布。</p>
</li>
</ul>
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://bre.is/BFhuTv7B">JavaScript, ES6, ES7, ES10 where are we?</a></p>
<p>介绍了现在ES新特性分别处于stage 0,1,2,3,4阶段的特性有哪些，哪些提案已经被拒绝。( PS:observer提案被拒绝了就很难受 )</p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/cSGz9Zf4HYEkxN_2qkIa1g">机器学习中的因果关系</a></p>
<p>原文章标题满满的公众号营销的感觉。但是实际内容很不错，作为扩展阅读非常合适，不需要深入研究过机器学习。</p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/BH-gmMpHUkMvBcSBgJWnwA">JWT攻击手册：如何入侵你的Token</a></p>
<p>jwt的安全相关问题，很多值得注意以及检查的点。</p>
</li>
<li>
<p><a href="https://juejin.im/post/5dfc709b51882579dc6f7f71">你知道 Chrome Devtool Performance报告中的DCL, L, FP, FCP, FMP, LCP 的含义吗</a></p>
<p>值得看一看</p>
</li>
</ul>
<h2 id="资源">资源</h2>
<ul>
<li>
<p><a href="https://selfhostedsource.tech/self-hosted">self-hosted</a></p>
<p>一个资源集，持续收集各种可以自己部署的开源优质服务</p>
</li>
<li>
<p><a href="https://github.com/xindoo/eng-practices-cn">谷歌工程实践</a></p>
<p>谷歌官方的工程实践文档，这是汉化版，目前只汉化了Code Review部分，值得了解</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://github.com/voidcosmos/npkill">voidcosmos/npkill</a></p>
<p>列出当前所有目录中的node_moudles目录，以及其大小，然后选择删除。可以瞬间释放大量内存</p>
</li>
</ul>
<h2 id="js库">JS库</h2>
<ul>
<li>
<p><a href="https://github.com/jagenjo/litegraph.js">jagenjo/litegraph.js</a></p>
<p>使用Javascript编写的图形节点引擎和编辑器。</p>
</li>
</ul>
<h2 id="备注">备注</h2>
<p>每期周报如果有特别重要的内容，十分值得关注的内容，会被打上&quot;值得关注&quot;标签，然后放到<a href="https://www.notion.so/aj0k3r/7790dd5fcb5e4da2b148c6da46d5298b?v=8490bb6c307443f7a496181fc0582ee3">这个地方</a></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/2019-12-27@2x.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[周报 2019.12.16-2019.12.20]]></title>
        <id>https://conceal.name/post/zhou-bao-20191216-20191220</id>
        <link href="https://conceal.name/post/zhou-bao-20191216-20191220">
        </link>
        <updated>2019-12-20T06:56:05.000Z</updated>
        <summary type="html"><![CDATA[<p>封面图作者: Pnakoticat</p>
]]></summary>
        <content type="html"><![CDATA[<p>封面图作者: Pnakoticat</p>
<!-- more -->
<h2 id="新闻">新闻</h2>
<ul>
<li>
<p><a href="https://www.w3.org/2019/12/pressrelease-wasm-rec.html.en">WASM 成为 HTML、CSS 与 JS 之后的第 4 门 Web 语言</a></p>
<p>近日，万维网联盟 W3C宣布 WebAssembly 核心规范（WebAssembly Core Specification）成为官方 Web 标准，这意味着 WebAssembly 成为了第 4 种 Web 语言。<br>
WebAssembly 也叫 Wasm，目前 1.0 版本的 Wasm 已经支持 Chrome、Firefox、Safari 与 Edge 浏览器。</p>
</li>
</ul>
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://yafeilee.com/blogs/100">实时协同编辑的实现</a></p>
<p>本文以作者自己开发的 ShowMeBug 应用为例，介绍如何实现多人同时编辑一篇文档</p>
</li>
<li>
<p><a href="https://iq.opengenus.org/audio-fingerprinting/">使用浏览器的 AudioContext API 生成用户指纹</a></p>
<p>很多网站想追踪用户，但是浏览器对 Cookie 的限制越来越严，于是有人想出使用音频 API，为每个用户生成一个音频指纹，通过这个指纹追踪用户。本文给出代码实例。</p>
</li>
<li>
<p><a href="https://paulstamatiou.com/getting-started-with-security-keys/">WebAuthn 密钥入门</a></p>
<p>WebAuthn 是互联网密钥登陆的国际标准，属于一种双因素认证的方法。本文对用户的密钥硬件和使用方法，进行长篇介绍。</p>
</li>
<li>
<p><a href="https://en.wikipedia.org/wiki/Karatsuba_algorithm#Example">Karatsuba 算法</a></p>
<p>Karatsuba 是1960年发现的一种快速相乘算法，可以大大减少大整数相乘的计算步骤。</p>
</li>
</ul>
<h2 id="资源">资源</h2>
<ul>
<li>
<p><a href="https://nlrx-wjc.github.io/Learn-Vue-Source-Code/start/">逐行剖析 Vue.js 源码</a></p>
<p>一组中文的系列文章，从初学者的角度，将 Vue.js 分成九个模块讲解源码。</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://getpixelsnap.com/zh/?ref=setapp">PixelSnap</a></p>
<p>直接系统级全局查看不同元素间距以及尺寸的工具，特别厉害，适合对尺寸要求特别高的项目</p>
</li>
</ul>
<h2 id="js库">JS库</h2>
<ul>
<li>
<p><a href="https://github.com/botpress/botpress">botpress/botpress</a></p>
<p>一个用Javascript编写开源bot创建工具，它由社区建立的一组丰富源模块提供支持。 我们喜欢说Botpress 就像Chatbots的Wordpress; 任何人都可以创建和重用其他人的模块。</p>
</li>
<li>
<p><a href="https://github.com/soldair/node-qrcode">soldair/node-qrcode</a></p>
<p>node-qrcode是一个QR码/2d条码生成器。nodejs端和浏览器端通用</p>
</li>
<li>
<p><a href="https://github.com/lovell/sharp">lovell/sharp</a></p>
<p>sharp 是 Node.js 平台上相当热门的一个图像处理库，其实际上是基于 C 语言编写 的 libvips 库封装而来，因此高性能也成了 sharp 的一大卖点。sharp 可以方便地实现常见的图片编辑操作，如裁剪、格式转换、旋转变换、滤镜添加等。</p>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[2019.12.09-2019.12.13]]></title>
        <id>https://conceal.name/post/20191209-20191213</id>
        <link href="https://conceal.name/post/20191209-20191213">
        </link>
        <updated>2019-12-13T10:00:37.000Z</updated>
        <summary type="html"><![CDATA[<p><em>封面图作者: SiyuMU</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>封面图作者: SiyuMU</em></p>
<!-- more -->
<h2 id="新闻">新闻</h2>
<ul>
<li><a href="https://www.solidot.org/story?sid=62899">GitHub 计划在中国设立子公司</a></li>
</ul>
<h2 id="设计">设计</h2>
<ul>
<li>
<p><a href="https://free.com.tw/whocanuse/">Who Can Use 檢查網頁配色對視力障礙使用者友善程度</a></p>
</li>
<li>
<p><a href="https://uxdesign.cc/design-better-data-tables-4ecc99d23356">表格的体验优化</a></p>
<p>本文采用大量示意图，展示了表格应该怎么设计，才能让用户获得最佳的使用体验。</p>
</li>
</ul>
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://juejin.im/post/5de7c053518825125d1497e2">图形算法（邻接矩阵）</a></p>
<p>邻接矩阵在前端的部分应用，很值得一阅。</p>
</li>
<li>
<p><a href="https://mp.weixin.qq.com/s/NmIfVW4SNahp7fgn7fUPsw">深入浅出之 swr</a></p>
<p>前不久才提到的<a href="https://github.com/zeit/swr">swr</a>这个库，才过不久就有了源码解析，不得不说目前这个库在前端的受关注度很高。</p>
</li>
<li>
<p><a href="https://www.cnblogs.com/esofar/p/9291685.html">快速签发 Let's Encrypt 证书指南</a></p>
<p>目前看到的最简单的签发https证书的方式。</p>
</li>
</ul>
<h2 id="资源">资源</h2>
<ul>
<li>
<p><a href="https://github.com/sindresorhus/awesome">sindresorhus/awesome</a></p>
<p>收集awesome仓库的awesome仓库，很好，很强。</p>
</li>
<li>
<p><a href="http://theory.stanford.edu/~amitp/GameProgramming/">A* 寻路算法教程</a></p>
<p>一个免费的英文教程，介绍 A* 寻路算法，寻找两点之间的最短路径。</p>
</li>
<li>
<p><a href="https://github.com/microsoft/api-guidelines/blob/master/Guidelines.md">微软 REST API 设计指南</a></p>
<p>微软的官方文档，讲解微软对 REST API 的设计要求。</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://github.com/itsuhane/SwitchKey">SwitchKey</a></p>
<p>简单实用，为不同的软件添加设置默认的输入法，比如聊天软件默认拼音输入法，编辑器默认英文输入法，省去每次来回切换输入法的蛋疼。重复的事情就应该扔给代码去自动化！！</p>
<p>使用方法，在对应的软件聚焦的时候，点击顶部图标，点击新增，就会自动记录当前软件以及当前输入法，切换输入法后再次记录会覆盖。( PS: 最新mac系统会看不到新增按钮，不过并不影响，点击最上面的空白区域就是了 )</p>
<p>示意图见附录一</p>
</li>
<li>
<p><a href="https://free.com.tw/moises-ai/">Moises.ai</a></p>
<p>一个线上利用AI来去除音乐中人声部分的工具，据说比普通的去除人声的软件效果好很多</p>
</li>
</ul>
<h2 id="js库">JS库</h2>
<ul>
<li>
<p><a href="https://github.com/Valve/fingerprintjs2">fingerprint.js</a></p>
<p>一个在浏览器生成用户指纹的 JS 库，可以识别用户，不使用 Cookie。</p>
</li>
<li>
<p><a href="https://github.com/lubjs/lub">lubjs</a></p>
<p>阿里的员工刚开源不久的用于简化命令行工具书写的框架, 用法感觉有点诡异，不过可以关注</p>
</li>
</ul>
<h2 id="附录一">附录一</h2>
<ul>
<li>
<p>SwitchKey</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/CleanShot20191210at112318@2x.png" alt="" loading="lazy"></figure>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ 周报 2019.12.02-2019.12.06]]></title>
        <id>https://conceal.name/post/zhou-bao-20191202-20191206</id>
        <link href="https://conceal.name/post/zhou-bao-20191202-20191206">
        </link>
        <updated>2019-12-06T03:29:14.000Z</updated>
        <summary type="html"><![CDATA[<p><em>(封面图作者: 画师JW)</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>(封面图作者: 画师JW)</em></p>
<!-- more -->
<h2 id="新闻">新闻</h2>
<ul>
<li>
<p><a href="https://bre.is/fTMdj3kU">Optional Chaining 进入 ES2020，不用满屏<code>x &amp;&amp; x.yyy</code>了</a></p>
<p>微软 TypeScript 程序经理 Daniel Rosenwasser 宣布 Optional Chaning（?. ）进入 TC39 Stage 4 状态，这意味着该特性现在已经是 ES2020 标准的一部分。</p>
</li>
</ul>
<h2 id="文章">文章</h2>
<ul>
<li>
<p>椭圆曲线加密算法系列:<a href="https://zhuanlan.zhihu.com/p/36326221">《一》</a> <a href="https://zhuanlan.zhihu.com/p/44743146">《二》</a> <a href="https://zhuanlan.zhihu.com/p/66794410">《三》</a></p>
<p>椭圆曲线加密算法是区块链加密技术的核心，典型的非对称加密算法。这个系列文章从最基础的椭圆曲线开始介绍，然后定义有限域，数学算式推导，一步一步的证明椭圆加密算法的思路。因为是数学推导，与代码无关，很适合作为了解学习。</p>
</li>
<li>
<p><a href="https://www.toutiao.com/a6738596936057618951/">如何构建自己的产品知识库</a></p>
</li>
<li>
<p><a href="https://chanind.github.io/javascript/2019/09/28/avoid-100vh-on-mobile-web.html">手机网页避免使用 100vh</a></p>
<p>手机浏览器由于会自动显示/隐藏地址栏，所以网页如果设成高度为 100vh，会有一部分看不见，可以参考 <a href="https://css-tricks.com/the-trick-to-viewport-units-on-mobile/">CSS Tricks</a> 和 <a href="https://stackoverflow.com/questions/37112218/css3-100vh-not-constant-in-mobile-browser">Stack Overflow</a> 的解决方法。</p>
</li>
<li>
<p><a href="https://theailearner.com/optical-character-recognition/">OCR 教程</a></p>
<p>这组系列文章教你如何自己写一个 OCR（光学字符识别）系统，从照片识别出文字。</p>
</li>
</ul>
<h2 id="资源">资源</h2>
<ul>
<li>
<p><a href="https://github.com/fangzesheng/free-api">freeAPI</a></p>
<p>一个收集各种免费API的仓库。目前已经有比较丰富的收集量了，自己做工具做实验的时候还不错。</p>
</li>
<li>
<p><a href="https://github.com/nusr/hacker-laws-zh">nusr/hacker-laws-zh</a></p>
<p>这是一个中文仓库，收集了各种对开发人员有用的定律、理论、原则和模式</p>
</li>
<li>
<p><a href="https://github.com/goldbergyoni/nodebestpractices">Node.js 编程最佳实践</a></p>
<p>该仓库收集 Node.js 编程的注意点，目前已经有80多条了。</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://git-lfs.github.com/">git-lfs</a></p>
<p>全称 <code>Git Large File Storage</code>  , 用于处理在git上存储大文件的情况，比如存储上G的文件，该工具做了相关处理，可以优化对应的上传下载速度。</p>
</li>
<li>
<p><a href="https://github.com/pahen/madge">madge</a></p>
<p>分析项目中的js文件，可视化输出相互的依赖关系。</p>
<p>配图见附录</p>
</li>
<li>
<p><a href="https://apps.apple.com/cn/app/new-file-menu/id1064959555?l=en&amp;mt=12">New File Menu</a></p>
<p>功能很简单，就是给mac在文件夹的右键菜单中添加一个 <code>新建文件</code> 的功能</p>
</li>
<li>
<p><a href="https://u.tools/">uTool</a></p>
<p>国人产品，差不多算是alfred的仿品，不过用着很舒服，潜力很大。</p>
</li>
<li>
<p><a href="https://free.com.tw/go64/">Go64</a></p>
<p>MacOS在10.15版本不再支持32位的程序，所以不少人犹豫要不要升级，本地有多少32位程序，升级后会不会因此而造成不少损失？这个程序就是遍历本机所有可执行文件（也可以只遍历Application目录），然后列出本地有哪些app是32位的。</p>
</li>
<li>
<p><a href="https://github.com/jumpserver/jumpserver">jumpserver</a></p>
<p>非常少见的开源的堡垒机管理后台工具，试用了下，很不错，我已经开始用来管理自己的各个服务器了。</p>
</li>
</ul>
<h2 id="js库">JS库</h2>
<ul>
<li>
<p><a href="https://github.com/sindresorhus/boxen">sindresorhus/boxen</a></p>
<p>用于js命令行工具的库，可以在终端生成一个类似于div的盒子，可以使用padding之类的简单方式布局。</p>
<p>配图与实例代码见附录</p>
</li>
</ul>
<h2 id="娱乐">娱乐</h2>
<ul>
<li><a href="https://zzkia.noddl.me:8020/">洛基亚短信图片生成 器</a></li>
</ul>
<h2 id="附录一">附录一</h2>
<ul>
<li>
<p>madge</p>
<figure data-type="image" tabindex="1"><img src="https://camo.githubusercontent.com/efe42226657c331807a70f06cc8cea889ef3ba8f/687474703a2f2f706168656e2e6769746875622e696f2f6d616467652f6d616467652e737667" alt="" loading="lazy"></figure>
</li>
<li>
<p>boxsen</p>
<figure data-type="image" tabindex="2"><img src="https://github.com/sindresorhus/boxen/raw/master/screenshot.png" alt="" loading="lazy"></figure>
</li>
</ul>
<h2 id="附录二">附录二</h2>
<ul>
<li>
<p>Boxsen</p>
<pre><code class="language-javascript">const boxen = require('boxen');

console.log(boxen('unicorn', {padding: 1}));
console.log(boxen('unicorn', {padding: 1, margin: 1, borderStyle: 'double'}));
</code></pre>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[小工具安利之<UTool>]]></title>
        <id>https://conceal.name/post/xiao-gong-ju-an-li-zhi-lessutoolgreater</id>
        <link href="https://conceal.name/post/xiao-gong-ju-an-li-zhi-lessutoolgreater">
        </link>
        <updated>2019-12-05T10:17:26.000Z</updated>
        <summary type="html"><![CDATA[<p><em>封面图作者:フライ</em></p>
<h2 id="简介">简介</h2>
<blockquote>
<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。</p>
<p>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>
</blockquote>
]]></summary>
        <content type="html"><![CDATA[<p><em>封面图作者:フライ</em></p>
<h2 id="简介">简介</h2>
<blockquote>
<p>uTools是一个极简、插件化、跨平台的现代桌面软件。通过自由选配丰富的插件，打造你得心应手的工具集合。</p>
<p>当你熟悉它后，能够为你节约大量时间，让你可以更加专注地改变世界。</p>
</blockquote>
<!-- more -->
<p>总体来说uTools就是一个类似Alfred的产品，基础功能和Alfred基本一致，快速搜索文件、快速打开app、快速执行自定义命令等等，连快捷键都和Alfred很类似，</p>
<h2 id="对比alfred">对比Alfred</h2>
<ul>
<li>优点:
<ul>
<li>免费</li>
<li>面向插件</li>
<li>对开发者友好</li>
<li>插件基于JS，书写简单</li>
</ul>
</li>
<li>缺点
<ul>
<li>因为基于JS，注定性能要逊色于Alfred</li>
<li>输入体验不如Alfred</li>
<li>社区还很新，不够成熟</li>
</ul>
</li>
</ul>
<h2 id="使用">使用</h2>
<h3 id="唤出">唤出</h3>
<p>默认快捷键 <code>option + space</code> 就可以唤出输入框</p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205173238.png" alt="" loading="lazy"></figure>
<h3 id="快速打开app">快速打开APP</h3>
<p>这一点其实和Alfred没什么区别，当你直接输入想要打开的app名字时，可以直接搜索到，并回车打开 (可以使用拼音)。</p>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205173525.png" alt="" loading="lazy"></figure>
<h3 id="安装插件">安装插件</h3>
<p>唤出输入框后，直接点击右侧的原型图标就可以打开插件，安装很多功能增强的插件。</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205173745.png" alt="" loading="lazy"></figure>
<h2 id="部分插件介绍">部分插件介绍</h2>
<h3 id="网页快开">网页快开</h3>
<p>这个其实就是把输入框变得类似chrome地址栏，输入地址就直接打开浏览器打开对应的网址，输入内容，就调用搜索引擎。</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205175130.png" alt="" loading="lazy"></figure>
<p>当然，这个功能其实没啥，不过因为这个插件还可以自己设置一个关键字，设置输入这个关键字后，默认以隐身模式打开特定网址。因为工作中有时候会在一个项目管理工具里来回切换不同的账号，这个功能反而挺有用。</p>
<h3 id="tempmail">tempmail</h3>
<p>这个插件在软件测试的时候十分有用，直接唤起uTool，输入插件关键字 <code>tm</code> , 就可以快速获取一个临时邮箱，收发邮件</p>
<figure data-type="image" tabindex="5"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205175641.png" alt="" loading="lazy"></figure>
<h3 id="各类文档插件">各类文档插件</h3>
<p>各类文档正在陆续增加中，估计以后会直接集成dash</p>
<figure data-type="image" tabindex="6"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205182013.png" alt="" loading="lazy"></figure>
<h3 id="编码转换">编码转换</h3>
<p>快速在输入框中进行各种编解码，比如日期格式化、uuid生成、md5等知名hash生成、进制转换等等.</p>
<figure data-type="image" tabindex="7"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205182114.png" alt="" loading="lazy"></figure>
<h3 id="颜色助手">颜色助手</h3>
<p>输入关键字后可以打开吸管直接全局取色，也可以读取到剪贴板中的图片，识别图片主色，或者输入色值，进行rgb、hex等等格式转换。</p>
<figure data-type="image" tabindex="8"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205182452.png" alt="" loading="lazy"></figure>
<h3 id="等等">等等</h3>
<p>其他还有不少不错的插件，比如快速修改host、todolist管理、剪贴板历史、翻译、图床等等，不过因为都有更好的原生app替代品，所以就不介绍了......</p>
<h2 id="补充">补充</h2>
<p>uTool还有一点我很喜欢，不知道Alfred有没有，之前用的时候没注意。uTool在打开的时候，会尝试读取你的剪贴板，如果你的剪贴板有文件，他就会搜索你的已安装插件里面支持图片处理的插件，然后问你是否要使用这个插件，把剪贴板文件作为输入。</p>
<figure data-type="image" tabindex="9"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191205182534.png" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[周报 2019.11.25-2019.11.29]]></title>
        <id>https://conceal.name/post/zhou-bao-20191125-20191129</id>
        <link href="https://conceal.name/post/zhou-bao-20191125-20191129">
        </link>
        <updated>2019-11-29T03:54:36.000Z</updated>
        <summary type="html"><![CDATA[<p>(封面图作者: SiyuMU)</p>
]]></summary>
        <content type="html"><![CDATA[<p>(封面图作者: SiyuMU)</p>
<!-- more -->
<h2 id="新闻">新闻</h2>
<ul>
<li>
<p><a href="https://bre.is/cVPXUnEv">欧洲 IPv4 地址用光</a></p>
<figure data-type="image" tabindex="1"><img src="https://www.wangbase.com/blogimg/asset/201911/bg2019112602.jpg" alt="" loading="lazy"></figure>
<p>11月25日，欧洲 IP 地址注册机构 RIPE 宣布，欧洲的 IPv4 地址全部分配光了，一个也没剩下，从此没有新的 IP 地址可以分配。为了纪念这个历史时刻，全体人员合影留言（上图）。</p>
</li>
</ul>
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://bre.is/8wQFYNCK">DNS 基础知识与 dig 命令</a> (英文)</p>
</li>
<li>
<p><a href="https://bre.is/2ad54Wmj">恶意的 SSH 访问分析</a></p>
<p>暴露在互联网上的服务器，每天都会收到大量的恶意 SSH 登录请求。作者分析了自己服务器的98万次 SSH 日志记录，看看能发现什么。</p>
</li>
<li>
<p><a href="https://bre.is/ejwBzEed">Web 缓存投毒攻击</a></p>
<p>访问网页，大多数时候都要通过缓存服务器，CDN 就是一种缓存。有可能做到缓存服务器投毒，从而使得网站无法访问，本文介绍它的原理。</p>
</li>
</ul>
<h2 id="资源">资源</h2>
<ul>
<li>
<p><a href="https://github.com/fighting41love/funNLP">fighting41love/funNLP</a></p>
<p>中文词库的集合。可用于：敏感词、语言检测、拆字词典等。作者整理了很多各方面的资源，学习NLP或者做一些NLP都有可能用到</p>
</li>
<li>
<p><a href="https://docs.microsoft.com/en-us/azure/architecture/">微软 Azure 架构设计文档</a></p>
<p>Azure 云服务的文档，专门讲解架构知识，包括架构模式，设计原则，设计模式等。</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://bre.is/qBZA9e1FD">Short URL</a></p>
<p>快速生成short url的chrome插件，在某个页面直接点击该插件就可以生成对应的短网址。短网址可以有效避免url中出现特殊字符在其他地方使用时的bug或者url过长带来的麻烦问题。该插件同时还会生成对应的url二维码，手机端可以直接扫码查看对应网页</p>
</li>
<li>
<p><a href="https://gitee.com/wallace5303/dapps">wallace5303/dapps</a></p>
<p>目前来说，这还是个玩具。码云上年度最有潜力项目之一。做了个web端的app商店，可以一键安装各种开发环境或者其他一些应用。核心思路是借用docker拉取对应镜像，然后基于配置去驱动。算是简化了docker的操作，不过目前内容较少，暂时没太大价值</p>
</li>
<li>
<p><a href="https://gitee.com/fastdfs100/fastdfs">fastdfs100/fastdfs</a></p>
<p>同样是码云上年度最有潜力项目之一，一个轻量级的分布式文件系统。作者从16年就开始开发该项目，中途弃坑一段时间，现在又开始更新。（PS：使用说明被放到了项目wiki里，作者readme里面完全没有提怎么用，找使用说明找了好久Orz）</p>
</li>
<li>
<p><a href="https://github.com/smooth-code/svgr">smooth-code/svgr</a></p>
<p>将SVG代码转换成React组件的工具，如果有些svg在显示上需要和项目的一些变量高度耦合，可以考虑变成组件然后去处理（PS：如果能转换成RN组件的话就方便了Orz）</p>
</li>
<li>
<p><a href="https://github.com/square/shift">square/shift</a></p>
<p>ruby写的数据库迁移工具，适用于一些迁移耗时很长的情景（PS：因为是打开浏览器的UI页面操作，理论上可以触发梯子，避免Navicat翻墙麻烦的问题）</p>
<p>示例图见附录二</p>
</li>
<li>
<p><a href="https://github.com/alibaba/RedisShake">alibaba/RedisShake</a></p>
<p>alibaba近期开源的redis之间同步数据的工具。</p>
</li>
<li>
<p><a href="https://unbug.github.io/codelf/">codeIf</a></p>
<p>这个网站总觉得很纠结，这是一个解决变量命名问题的工具。你输入变量的中文词，他会去搜索对应知名的github库里类似的变量名，提供参考。可以说很实用，但是作为一个网页工具，又总是感觉很麻烦。</p>
<p>示例图见附录二</p>
</li>
<li>
<p><a href="https://github.com/opendevops-cn/opendevops">opendevops-cn/opendevops</a></p>
<p>CODO是一款为用户提供企业多混合云、一站式DevOps、自动化运维、完全开源的云管理平台、自动化运维平台.</p>
<p>使用了下他的demo，感觉很厉害，不少东西挺实用。不过emmm，安装有点复杂。</p>
</li>
<li>
<p><a href="https://docs.svrx.io/zh/">svrx</a></p>
<p>我感觉这个可以用来快速做前端demo，但是似乎有些地方又有点缺陷。需要再研究研究。</p>
</li>
<li>
<p><a href="https://github.com/FiloSottile/mkcert">mkcert</a></p>
<p>这个工具是给https项目开发用的，有些项目是强制https的，但是本地开发一般是http，所以会遇到各种问题。这个工具可以给本地localhost签发一个https证书，自己信任自己。不过看了下readme，没太弄明白怎么用。也需要再研究研究</p>
</li>
<li>
<p><a href="https://juejin.im/post/5dd1498fe51d453d970d8333#heading-5">Hazel</a></p>
<p>这是一个自动整理文件的工具，对于像下载文件夹特别乱，文件经常找不到的人（比如我），就很有用，链接的这篇文章大致介绍了常见用法，感觉很赞</p>
</li>
<li>
<p><a href="https://www.52doutu.cn/diy/">斗图大师</a></p>
<p>写文章或者水群，怎么能少的了表情包。没有合适的表情包？不怕，我们现场做一个！在线表情包制作工具，包含了大量热门表情包的素材，只需要想一想文案，剩下的事情，拖拽就好了喵</p>
<p>示例图见附录二</p>
</li>
</ul>
<h2 id="js-库">JS 库</h2>
<ul>
<li>
<p><a href="https://github.com/substack/node-mkdirp">substack/node-mkdirp</a></p>
<p>在写命令行工具的时候很实用，类似于<code>mkdir -p</code>, 直接按照给出的字符串新建多级目录。示例代码见附录一</p>
</li>
<li>
<p><a href="https://github.com/jonschlinkert/normalize-path">jonschlinkert/normalize-path</a></p>
<p>写跨平台命令行脚本的时候会用到。统一路径字符串，把所有的路径分隔符都转换为unix类型的/，比如在win上面，分隔符就是反斜线\</p>
</li>
<li>
<p><a href="https://github.com/typestack/class-transformer">typestack/class-transformer</a></p>
<p>nestjs默认内置的工具库，感觉特别的实用。大致功能是将类实例转换为普通的js Object或者将一个js Object映射成一个写好的类的实例。在nestjs中，利用它，我们可以直接在接口中返回数据库的模型实体给前端。只需要在实体声明中用装饰器声明那些字段返回的时候要屏蔽，哪些字段名字映射要变化，哪些字段需要转换等等。这样控制器和service可以更好的保持单一职责的原则。常用的就是直接返回用户模型实体，过滤掉password等字段，头像url声明返回时需要urlEncode转码，角色权限关系需要转换成字符串数组等等</p>
</li>
<li>
<p><a href="https://github.com/vortesnail/qier-player">vortesnail/qier-player</a></p>
<p>一个轻量级的react视频播放器，在某些情况下可能会用到。</p>
</li>
<li>
<p><a href="https://github.com/eligrey/FileSaver.js">eligrey/FileSaver.js</a></p>
<p>一个保存文件的库，在浏览器端使用，可以不经过服务器，前端自己生成数据，弹出下载框让用户下载。也可以直接给定url，弹出下载框。</p>
</li>
<li>
<p><a href="https://github.com/nzbin/photoviewer">nzbin/photoviewer</a></p>
<p>一个预览图片的js库，支持缩放、旋转等常见需求。维护一些老项目的时候可以将就着用。</p>
</li>
<li>
<p><a href="https://bre.is/AWjBfky3">DoKit</a></p>
<p>严格来说这个不是js库，这个是滴滴给app端做的辅助开发的库，可以直接看安装好的app信息，查看权限是否开齐全了，系统日志输出了些什么，app本地存储了些什么数据。在debug的时候很实用。用过DoKit1.0的版本，接入很方便，2.0加了不少功能，很nice</p>
</li>
</ul>
<h2 id="附录1-部分代码演示">附录1 部分代码演示</h2>
<ul>
<li>
<p>substack/node-mkdirp</p>
<pre><code class="language-javascript">var mkdirp = require('mkdirp');
    
mkdirp('/tmp/foo/bar/baz', function (err) {
    if (err) console.error(err)
    else console.log('pow!')
});
</code></pre>
</li>
</ul>
<h2 id="附录2-部分截图演示">附录2 部分截图演示</h2>
<ul>
<li>
<p>square/shift</p>
<figure data-type="image" tabindex="2"><img src="https://github.com/square/shift/raw/master/ui/screenshots/summary.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>codeIf</p>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191127113026.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>斗图大师</p>
<figure data-type="image" tabindex="4"><img src="https://raw.githubusercontent.com/tanlukang/inceptionpad-wiki/images/xiabin/20191127113308.png" alt="" loading="lazy"></figure>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[周报 2019.11.18-2019.11.22]]></title>
        <id>https://conceal.name/post/zhou-bao-20191118-20191122</id>
        <link href="https://conceal.name/post/zhou-bao-20191118-20191122">
        </link>
        <updated>2019-11-22T03:30:14.000Z</updated>
        <summary type="html"><![CDATA[<p><em>(封面图作者: nys)</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>(封面图作者: nys)</em></p>
<!-- more -->
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://pomb.us/build-your-own-react/">从零开始写一个 React 框架</a></p>
<p>挺不错的了解react的文章</p>
</li>
<li>
<p><a href="https://github.com/ruanyf/document-style-guide/blob/master/docs/text.md">中文文章写作规范</a></p>
<p>阮一峰大佬写的关于中文文章的写作规范</p>
</li>
<li>
<p><a href="https://reactjs.org/docs/concurrent-mode-intro.html#what-is-concurrent-mode">Introducing Concurrent Mode</a></p>
<p>介绍了React仍处于实验室阶段的新特性 &quot;并行渲染&quot;，相关的使用场景以及和传统方式相比的差异。如果能投入生产环境，应该会对当前很多react的场景带来改变。 (<strong>非常值得关注</strong>)  (英文)</p>
</li>
<li>
<p><a href="https://juejin.im/post/5dd39c866fb9a0200f053b0f">如何监听 DOM 变化</a></p>
<p>文章讲的很浅，但是其中提到的Mutation Observer这个特性很重要，如果要自己手写一个小框架练手，或者写网页工具，那么这个就很值得了解了</p>
</li>
<li>
<p><a href="https://github.com/drduh/YubiKey-Guide#purchase-yubikey">drduh/YubiKey-Guide</a></p>
<p>YubiKey 是一种目前较为流行的硬件密钥，这个仓库是网友写的使用手册（英文）(PS: 之前也打算过买一个试试，不过在amazon上价格还是有点稍贵，也有一些兼容方面的硬伤)</p>
</li>
<li>
<p><a href="https://www.manifold.co/blog/graphql-vs-rest-whats-the-advantage">GraphQL vs. REST: What's The Advantage?</a></p>
<p>对比介绍GraphQL比REST好在哪里。不得不说GraphQL前景很高，不过在国内没有那么火 (英文)</p>
</li>
<li>
<p><a href="https://www.netlify.com/blog/2019/03/11/deep-dive-how-do-react-hooks-really-work/">Deep dive: How do React hooks really work?</a></p>
<p>介绍了React Hook的原理，然后介绍了怎么简单的自己实现一个React Hook功能 (英文)</p>
</li>
<li>
<p><a href="https://chriskiehl.com/article/gooey-as-a-universal-frontend">Using Gooey as a Universal Frontend for any Language or CLI Application</a></p>
<p>介绍了怎么用Gooey这个库通过简单的描述，自动为python命令行工具生成gui页面，十分给力  (英文)</p>
</li>
</ul>
<h2 id="资源">资源</h2>
<ul>
<li>
<p><a href="https://free-for.dev/#/?id=free-fordev">free-for.dev</a></p>
<p>该仓库收集各种可以免费使用的（或有免费层的）互联网服务</p>
</li>
<li>
<p><a href="http://t.cn/Air2Rw5Y">FCC 2019成都全栈大会</a></p>
<p>2019年成都全栈大会PPT整理，不少值得关注的东西</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://github.com/ngbdf/redis-manager">Redis Manager</a></p>
<p>作为一个 Redis 一站式管理平台，它支持 Redis 集群的管理、监控、创建以及告警等功能。它大大降低了 Redis 集群的运维成本，能做到对集群的实时监控，在 Redis 出现问题是进行准确的故障排查，亦或者通过分析历史数据还原 Redis 故障时的场景，同时还支持自定义监控规则的告警功能，让你随时了解 Redis 的运行状况。</p>
<p>配图见附录2</p>
</li>
<li>
<p><a href="https://github.com/yinxin630/fiora">fiora</a></p>
<p>一个功能丰富、支持多端的在线聊天室。它界面小清新，支持基本的聊天功能的同时还有好玩的消息朗读功能。项目上基于 TypeScript + React 16.9 代码逻辑清晰、注释较为完善，适合用来学习 node.js、 TypeScript、React 等技术</p>
<p>配图见附录2</p>
</li>
</ul>
<h2 id="js-库">JS 库</h2>
<ul>
<li>
<p><a href="https://github.com/Mckinsey666/chart-race-react">Mckinsey666/chart-race-react</a></p>
<p>一个简单易用的 Bar Chart Race（长条图赛跑动画） React 组件：chart-race-react</p>
</li>
<li>
<p><a href="https://github.com/alibaba/form-render">form-render</a></p>
<p>阿里内部表单生成器开源，基于schema生成表单</p>
</li>
<li>
<p><a href="douglasjunior/react-native-keyboard-manager">react-native-keyboard-manager</a></p>
<p>好用的RN的键盘防遮挡库，同时还会为各类原生键盘添加Done按钮，非常实用 (<strong>来自Joe的投稿</strong>)</p>
</li>
<li>
<p><a href="https://github.com/HarryChen0506/react-markdown-editor-lite">HarryChen0506/react-markdown-editor-lite</a></p>
<p>一款轻量的基于React的markdown编辑器</p>
</li>
<li>
<p><a href="https://github.com/sindresorhus/globby">sindresorhus/globby</a></p>
<p>nodejs自带的glob库的扩展库，写命令行程序的时候会非常有用。如果你想批量匹配一个目录下的满足某些条件的文件并且惰性加载，这个库就很实用 (ps: 例如egg这类库，在config目录下写的所有js都会被加载到全局实例的属性中，就是靠这种方式的)</p>
</li>
<li>
<p><a href="https://github.com/zeit/swr">swr</a></p>
<p>一个React Hook工具，传入一个service函数作为驱动，可以用swr来依靠react hook的方式管理service的数据拉取操作，同时管理token的刷新和出错自动重试之类的操作</p>
</li>
<li>
<p><a href="https://www.npmjs.com/package/yargs">yargs</a></p>
<p>算是命令行工具commander的竞品，但是对多级子命令的支持更好  (代码示例见附录一)</p>
</li>
<li>
<p><a href="https://gun.eco/docs/Introduction">GunDB</a></p>
<p>一个离线优先的去中心化数据库，数据存储在浏览器端，依靠一个轻量的服务器来做同步通讯。十分适合做端到端加密的应用以及一些比如AR之类的离线优先的应用</p>
</li>
</ul>
<h2 id="附录1-部分代码演示">附录1 部分代码演示</h2>
<ul>
<li>
<p>yargs</p>
<pre><code class="language-javascript">#!/usr/bin/env node
require('yargs')
  .command(['start [app]', 'run', 'up'], 'Start up an app', {}, (argv) =&gt; {
    console.log('starting up the', argv.app || 'default', 'app')
  })
  .command({
    command: 'configure &lt;key&gt; [value]',
    aliases: ['config', 'cfg'],
    desc: 'Set a config variable',
    builder: (yargs) =&gt; yargs.default('value', 'true'),
    handler: (argv) =&gt; {
      console.log(`setting ${argv.key} to ${argv.value}`)
    }
  })
  .demandCommand()
  .help()
  .wrap(72)
  .argv
</code></pre>
</li>
</ul>
<h2 id="附录2-部分截图演示">附录2 部分截图演示</h2>
<ul>
<li>
<p>Redis Manager</p>
<figure data-type="image" tabindex="1"><img src="https://github.com/ngbdf/redis-manager/raw/master/documents/images/index.png" alt="" loading="lazy"></figure>
</li>
<li>
<p>Mckinsey666/chart-race-react</p>
<figure data-type="image" tabindex="2"><img src="https://hellogithub.cn-bj.ufileos.com/hellogithub/43/img/chart-race-react.gif" alt="" loading="lazy"></figure>
</li>
<li>
<p>fiora</p>
<figure data-type="image" tabindex="3"><img src="https://hellogithub.cn-bj.ufileos.com/hellogithub/43/img/fiora.png" alt="" loading="lazy"></figure>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[周报 2019.11.11-2019.11.15]]></title>
        <id>https://conceal.name/post/zhou-bao-20191111-20191115</id>
        <link href="https://conceal.name/post/zhou-bao-20191111-20191115">
        </link>
        <updated>2019-11-15T02:48:04.000Z</updated>
        <summary type="html"><![CDATA[<p><em>(封面图作者: 香川悠作)</em></p>
]]></summary>
        <content type="html"><![CDATA[<p><em>(封面图作者: 香川悠作)</em></p>
<!-- more -->
<h2 id="文章">文章</h2>
<ul>
<li>
<p><a href="https://vasanthk.gitbooks.io/react-bits/">React Bits</a></p>
<p>关于JSX相关小技巧的集合</p>
</li>
<li>
<p><a href="https://zellwk.com/blog/converting-callbacks-to-promises/">converting-callbacks-to-promises</a></p>
<p>将回调函数转变为promise的各种方案（英文）</p>
</li>
<li>
<p><a href="https://itnext.io/how-json-stringify-killed-my-express-server-d8d0565a1a61">how-json-stringify-killed-my-express-server</a></p>
<p>JSON.stringify为什么在服务端会大量占用CPU资源（英文）</p>
</li>
<li>
<p><a href="https://www.conventionalcommits.org/zh-cn/v1.0.0-beta.4/">约定式提交</a></p>
<p>详细介绍了commit message的通用约定规范，其对应的目的，带来的好处等等</p>
</li>
<li>
<p><a href="https://www.duyaoss.com/archives/3/">浅谈部分机场的使用感受</a></p>
<p>由于自建SSR容易被BAN，速度慢等等问题，机场（SSR as Service） 成了另一种<strong>个人用</strong>梯子的一个方案，这篇文章讲了目前的一些知名大型机场的一些优缺点以及费用等等</p>
</li>
<li>
<p><a href="https://easyai.tech/blog/59pdf-nlp-all-in-one/">「59页PDF」自然语言处理 NLP 基本概念大全（免费下载</a></p>
<p>如题</p>
</li>
<li>
<p><a href="https://juejin.im/post/5dbf749df265da4d560910b8">精读《React Conf 2019 - Day1》</a></p>
<p>React conf大会的内容总结，未来的发展方向，新的写法，新的特性等等，值得一看</p>
</li>
<li>
<p><a href="https://juejin.im/post/5d5ccdd75188255625591357">axios如何利用promise无痛刷新token(一)</a></p>
<p>在用户无感知情况下刷新token过期时间，替换token是做token状态管理的一大重点，本文主要讲了以前端判断为主的一种方案以及以后端判断为主的另一种方案，值得了解。PS: 以及后续<a href="https://juejin.im/post/5dcac7686fb9a04a9e37b595">axios如何利用promise无痛刷新token(二)</a></p>
</li>
<li>
<p><a href="https://juejin.im/post/5dc4d823f265da4d4c202d3b">V8 是怎么跑起来的 —— V8 的 JavaScript 执行管道</a></p>
<p>对V8部分机制的介绍，文章有一点点小长，可以单纯的作为扩展知识面的一个了解。</p>
</li>
<li>
<p><a href="https://zhuanlan.zhihu.com/p/87940654">《面向传统，Serverless 进化之路》分享文字版</a></p>
<p>标标准准的基于函数云的微服务架构实践，全面函数化的微服务，可以参考思路。（PS: 没有参加今年的 JS Conf好可惜）</p>
</li>
<li>
<p><a href="https://juejin.im/post/5db4253451882556a035ae5d?utm_source=tuicool&amp;utm_medium=referral">带你手写微前端框架</a></p>
<p>微前端的代码实现方案思路，可以参考。PS：这是微前端，不是微服务。</p>
</li>
<li>
<p><a href="https://fangpenlin.com/posts/2019/10/07/elliptic-curve-cryptography-explained/">椭圆曲线加密法(英文)</a></p>
<p>基于数学的椭圆曲线加密技术，很厉害，但是没看懂.....</p>
</li>
</ul>
<h2 id="工具">工具</h2>
<ul>
<li>
<p><a href="https://github.com/b3log/solo">b3log/solo</a></p>
<p>一款小而美的博客系统，专为程序员设计，包含了一整套的成型的个人博客搭建方案和后台系统。(PS: 同时推荐个人感觉更好用的零成本的博客搭建系统 <a href="https://gridea.dev/">Gridea</a></p>
<p>示例图见附录2.</p>
</li>
<li>
<p><a href="https://github.com/mcollina/autocannon">mcollina/autocannon</a></p>
<p>知名的压力测试工具</p>
<p>示例图见附录2.</p>
</li>
<li>
<p><a href="https://crontab.guru/">crontab</a></p>
<p>在线编辑cron表达式的工具</p>
</li>
<li>
<p><a href="https://github.com/n8n-io/n8n">n8n-io/n8n</a></p>
<p>开源的个人自动化workflow工具，如果你用过zapire或者IFTTT，那这个可能是个不错的替代品</p>
<p>示例图见附录2.</p>
</li>
<li>
<p><a href="https://github.com/lra/mackup">lra/mackup</a></p>
<p>与Dropbox等网盘结合的系统配置备份工具，支持超过200多个常用的命令行APP的配置备份与意见还原。同时可以轻松的自定义自己的备份app，让换开发机或者一键导入环境变得更简单</p>
</li>
<li>
<p><a href="https://www.yinsiduanxin.com/dl/1.html">隱私小號</a></p>
<p>在线网页工具，提供大量可供收发临时短信的手机号，可以用于短信功能的实机测试</p>
</li>
<li>
<p><a href="https://github.com/imgproxy/imgproxy">imgproxy/imgproxy</a></p>
<p>Go语言写的一个图片代理服务器，支持docker部署，可以代理服务，预处理图片，包括裁剪、压缩、缩放、简单特效等等实用功能，支持图片存放在本地、S3以及google drive。<strong>值得关注</strong></p>
</li>
<li>
<p><a href="https://screendump.techulus.com/">screendump</a></p>
<p>一个在线预览目标Url在不同尺寸下显示效果的网站，虽然不能像浏览器开发者工具一样还可以操作，但是好处是方便，可以一次看到所有常用尺寸下的效果，对静态站的效果很不错。</p>
</li>
</ul>
<h2 id="js-库">JS 库</h2>
<ul>
<li>
<p><a href="https://github.com/matthewmueller/x-ray">matthewmueller/x-ray</a></p>
<p>从html中提取元素转换为json输出的类库</p>
<p>示例代码见附录1.</p>
</li>
<li>
<p><a href="https://github.com/ai/nanoid/">ai/nanoid</a></p>
<p>非常简单轻量的UUID生成器类库，基于uuid v4规范，适用于简单的环境</p>
</li>
<li>
<p><a href="https://github.com/jonschlinkert/dashify">jonschlinkert/dashify</a></p>
<p>功能简单的使用小工具库，就是把大小驼峰字符串转换为中划线分割的字符串，简单，但是有时候很实用。</p>
<p>示例代码见附录1.</p>
</li>
<li>
<p><a href="https://github.com/react-hook-form/react-hook-form/blob/master/docs/README.zh-CN.md">react-hook-form/react-hook-form</a></p>
<p>使用react-hook实现的form组件，对代码侵入性非常低，而且基于hook的写法也非常简洁，支持RN和Web，有个在线工具可以在线拖拽生成对应代码直接使用，在github上的star也非常高，<strong>十分值得关注</strong>。</p>
</li>
</ul>
<h2 id="一句话新闻">一句话新闻</h2>
<ul>
<li>Typescript 3.7版本正式发布，支持可选运算符、nullish 合并、原生的断言 assert 方法等等期待已久的新特性，值得关注。</li>
<li>10月25日，谷歌发布了一种新的搜索算法 BERT，已经用于生产环境。这种算法最大的特点，就是考虑了搜索词的语序。以前的算法只考虑每个词本身，搜索hello world与搜索world hello，结果是一样的。<a href="https://blog.google/products/search/search-language-understanding-bert/">点击查看</a></li>
<li>Github官方终于推出了手机版的github，ios版已经可以下载试玩了，安卓版似乎是审核问题，还需要稍等.<a href="https://github.com/mobile">传送门</a></li>
</ul>
<h2 id="附录1-部分代码演示">附录1 部分代码演示</h2>
<ul>
<li>
<p>matthewmueller/x-ray</p>
<pre><code class="language-javascript">var Xray = require('x-ray')
var x = Xray()

x('https://blog.ycombinator.com/', '.post', [
  {
    title: 'h1 a',
    link: '.article-title@href'
  }
])
  .paginate('.nav-previous a@href')
  .limit(3)
  .write('results.json')
</code></pre>
</li>
<li>
<p>jonschlinkert/dashify</p>
<pre><code class="language-javascript">var dashify = require('dashify');

console.log(dashify('fooBar'));
//=&gt; 'foo-bar'

console.log(dashify('fooBarBaz'));
//=&gt; 'foo-bar-baz'

console.log(dashify('foo bar'));
//=&gt; 'foo-bar'

console.log(dashify('foo barBaz'));
//=&gt; 'foo-bar-baz'

console.log(dashify('foo barBaz quux'));
//=&gt; 'foo-bar-baz-quux'

console.log(dashify('São Tomé and Príncipe'));
//=&gt; 'são-tomé-and-príncipe'
</code></pre>
</li>
</ul>
<h2 id="附录2-部分截图演示">附录2 部分截图演示</h2>
<ul>
<li>
<p>solo</p>
<ul>
<li>
<figure data-type="image" tabindex="1"><img src="https://user-images.githubusercontent.com/970828/56886176-f210a700-6aa0-11e9-894f-75eda5cf3317.png" alt="" loading="lazy"></figure>
</li>
<li>
<figure data-type="image" tabindex="2"><img src="https://user-images.githubusercontent.com/970828/56886177-f2a93d80-6aa0-11e9-8a87-14731bdf59e7.png" alt="" loading="lazy"></figure>
</li>
</ul>
</li>
<li>
<p>mcollina/autocannon</p>
<ul>
<li><img src="https://raw.githubusercontent.com/mcollina/autocannon/master/demo.gif" alt="" loading="lazy"></li>
</ul>
</li>
<li>
<p>n8n-io/n8n</p>
<ul>
<li><img src="https://raw.githubusercontent.com/n8n-io/n8n/master/docs/images/n8n-screenshot.png" alt="" loading="lazy"></li>
</ul>
</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[基于文本密度提取网页正文]]></title>
        <id>https://conceal.name/post/ji-yu-wen-ben-mi-du-ti-qu-wang-ye-zheng-wen</id>
        <link href="https://conceal.name/post/ji-yu-wen-ben-mi-du-ti-qu-wang-ye-zheng-wen">
        </link>
        <updated>2019-10-11T11:17:19.000Z</updated>
        <summary type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>近期看到了一篇蛮不错的论文《<a href="http://kns.cnki.net//KXReader/Detail?TIMESTAMP=637061287807268750&amp;DBCODE=CJFQ&amp;TABLEName=CJFDLAST2019&amp;FileName=GWDZ201908029&amp;RESULT=1&amp;SIGN=Ru92HQCAbOX5F3X475n1xKVQA7I%3d&amp;UID=WEEvREcwSlJHSldTTEYzVTE0ZUZRMGFJdytrZXZHWmJkaE5oc3RlMlJyMD0%3d%249A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;autoLogin=0">基于文本及符号密度的网页正文提取方法</a>》，因为刚好在学习Rust写hello world，想想干脆试试能不能实现这个思路吧，于是开始尝试代码实现。</p>
]]></summary>
        <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>近期看到了一篇蛮不错的论文《<a href="http://kns.cnki.net//KXReader/Detail?TIMESTAMP=637061287807268750&amp;DBCODE=CJFQ&amp;TABLEName=CJFDLAST2019&amp;FileName=GWDZ201908029&amp;RESULT=1&amp;SIGN=Ru92HQCAbOX5F3X475n1xKVQA7I%3d&amp;UID=WEEvREcwSlJHSldTTEYzVTE0ZUZRMGFJdytrZXZHWmJkaE5oc3RlMlJyMD0%3d%249A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;autoLogin=0">基于文本及符号密度的网页正文提取方法</a>》，因为刚好在学习Rust写hello world，想想干脆试试能不能实现这个思路吧，于是开始尝试代码实现。</p>
<!-- more -->
<h2 id="思路">思路</h2>
<p>总的来说，这篇论文分析了大部分新闻网站页面，思考了其中的数学共性。虽然不同的网站，结构千变万化，但是从读者的直观印象来说，正文部分是十分明显的。打开一个新闻网页，我们总能很轻松的找出正文在哪里，而不会把广告或者页脚什么的当成正文。</p>
<p>按照这个思路走下去，我们大脑是如何识别正文的呢？首先，文本的数量必然是关键变量之一。其次就是文本的密集程度，正文的内容总是密集耦合在一起的，而不是部分在页面上方，部分在右下角这样分散排布的，正文总是会被一个“框”给包裹起来成为一个整体。对于读者来说，这个“框”是设计上的分割线，对于网页来说，这个“框”就是所有正文所公共的父级DOM节点。</p>
<p>假如我们能抽象出一个公式来模拟大脑的识别，那么我们就能像读者找出正文所在的“框”一样，找出包裹着正文的最近的DOM节点，从而精确提取出正文。</p>
<h2 id="实现">实现</h2>
<ol>
<li>
<p>DOM树生成</p>
<p>首先根据拿到的网页源代码，我们可以很简单的生成一颗DOM树，这个在不同语言都有自己的实现，可以很轻松的生成。</p>
</li>
<li>
<p>Info树的生成</p>
<p>因为我们实际需要的每个树节点的部分信息，因此，我们需要遍历DOM树，拿到每个节点的特定信息后生成一棵新的Info树。之后所有的操作都基于这颗Info树来进行。</p>
<p>p.s. 因为正文必然是在Body标签内部的，所以我们可以直接把Body标签作为新树的根节点。</p>
<p>p.p.s 同样因为我们不关心渲染与执行，所以script、form、img、style等等标签除了影响结果外毫无用处，所以新树生成的时候需要过滤掉这些节点。</p>
<p>p.p.p.s 在现代网页中，因为网页很多标签是动态生成的，所以会有大量的无内容的空标签占位，同样需要将其移除。</p>
<p>最后每个Info 树的节点大概会像这样的:</p>
<pre><code> pub struct Node {
     pub tag_num: i16, // 该节点子代tag节点数量
     pub text_length: i32, // 该节点总文本长度
     pub link_tag_num: i16, // 该节点子代中超链接tag节点数量
     pub text_tag_num: i16, // 该节点子代中文本tag节点数量
     pub punctuation_num: i16, // 该节点子代中所有文本符号数量
     pub link_tag_text_length: i16, // 该节点子代节点中超链接tag节点文本长度
     pub td: f32, // 该节点计算出的文本密度
     pub sbd:f64, // 该节点计算出的符号密度
     pub score: f64, // 该节点计算出的分数
     pub node_type: NodeTypeEnum, // 该节点的类型
     pub tag_name: String, // 标签名称
     pub text: String, // 如果是文本标签，则保存了对应的文本值
     pub children: Vec&lt;Node&gt;, // 子代节点
 }
</code></pre>
</li>
<li>
<p>计算</p>
<p>可以看出，除去基本信息，我们需要计算的就是每个节点的文本密度、符号密度以及所有节点的文本密度的标准差。然后带入公式对每个节点进行打分。</p>
<p>p.s. 具体公式以及公式推导请参考论文，这里不太适合将别人研究成果直接放在文章内。《<a href="http://kns.cnki.net//KXReader/Detail?TIMESTAMP=637061287807268750&amp;DBCODE=CJFQ&amp;TABLEName=CJFDLAST2019&amp;FileName=GWDZ201908029&amp;RESULT=1&amp;SIGN=Ru92HQCAbOX5F3X475n1xKVQA7I%3d&amp;UID=WEEvREcwSlJHSldTTEYzVTE0ZUZRMGFJdytrZXZHWmJkaE5oc3RlMlJyMD0%3d%249A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;autoLogin=0">基于文本及符号密度的网页正文提取方法</a>》</p>
</li>
<li>
<p>遍历</p>
<p>遍历整棵树找出分数最高的节点，就是对应的正文节点。</p>
</li>
<li>
<p>测试</p>
<p>论文中提到的新闻网差不多正确率百分之九十九左右，虽然是论文中自己提供的正确率，但是实际测试确实还没有遇到提取失败的情况。</p>
</li>
</ol>
<h2 id="进一步思考">进一步思考</h2>
<p>在基础实现后，我尝试对掘金、简书等技术文章网站进行了测试，发现效果极差，几乎没有成功的案例。</p>
<p>所以和新闻网站结构类似的文章网站为什么会失效呢？从我们之前的分析来说，应该不会因为是文章而不是新闻而产生差异啊。</p>
<p>经过对比后发现，主要原因在于掘金等这些偏技术的文章网站，文章内容主要是由MD格式的文章转换成HTML而来的，而MD特殊之处导致了公式中很多变量产生了变动.</p>
<h3 id="md的转换">MD的转换</h3>
<p>虽然从结果来看，直接写html的文章和写md格式的文章转换成html显示，这两种方式并不会有什么差别，用户也可以无感知的使用在线编辑器。</p>
<p>但是对比可以发现，因为MD的语法习惯，所以会有大量的斜体、加粗、强调、引用等等样式标记被装换成b、i、strong等等标签，而在新闻网中，这些往往是交给css处理的样式。这样就导致产生了大量的零碎的标签，降低父文本的文本密度。</p>
<p>其次，在转换中，p标签的出现次数也极低，大部分文本在转换中直接成了div的子元素，而不是被包裹在标准的p标签中。</p>
<p>对于标准html来说，正文往往就是被一大堆p标签分割的段落组成。然而在MD转换的html代码中，正文大部分被div、li、code、pre等等多种多样的标签包裹，影响打分。</p>
<h3 id="md的写作习惯">MD的写作习惯</h3>
<p>同时，因为MD语法被程序员用的最多，并且技术文章的结构特性，也导致了文章中大概率会出现非常多的有序列表和无序列表还有代码举例，所以li、ol、code、pre这几个标签分别占有了文本总长度中非常高的比例。</p>
<p>综上所述，如果按照原有计算方式计算，最后父节点的打分会非常低，而一些直接包裹文本的节点会因为文本密度非常高而分数变得异常的高。</p>
<h2 id="修改">修改</h2>
<p>针对以上情况，可以考虑做以下处理:</p>
<ul>
<li>因为div在该模型中主要担当container的角色，所以不应该直接包裹文本元素，在生成Info树的时候，如果遇到直接属于div的文本内容，应手动为其包裹一层p标签。</li>
<li>对于strong、b、i这类纯样式修饰的行内标签，可以直接移除，包裹的文本直接归并到上一级文本节点中。</li>
<li>原论文中在打分公式中计算了整颗树p标签节点的数量来作为参考变量。而在md中，应考虑将ul、code、pre等高频标签当做p标签来计数。除去渲染出来的样式，他们在整体结构中，和p标签的作用是一致的。</li>
<li>因为内容被各种标签分成了太多的小块，导致部分文本标签打分异常暴涨可能性极高，可以考虑查找最高分数的节点的时候，主动过滤掉不可能成为正文父节点的一些标签，如p、code、pre等等，找出容器类标签中分值最高的那一个节点。（ p.s. 这条才是真正可以大幅度提高正确率的操作 ）</li>
</ul>
<h2 id="结语">结语</h2>
<p>修改后的代码，对于掘金、简书等文章基本可以正确的提取正文了。（ p.s. 缺乏充足的用例测试 ）</p>
<p>最后吐槽，rust的思路真的太难受了，比起用其他语言实现，起码多花了一倍的时间在思考语法该怎么写上面Orz。</p>
<p>附上链接:</p>
<p>论文：《<a href="http://kns.cnki.net//KXReader/Detail?TIMESTAMP=637061287807268750&amp;DBCODE=CJFQ&amp;TABLEName=CJFDLAST2019&amp;FileName=GWDZ201908029&amp;RESULT=1&amp;SIGN=Ru92HQCAbOX5F3X475n1xKVQA7I%3d&amp;UID=WEEvREcwSlJHSldTTEYzVTE0ZUZRMGFJdytrZXZHWmJkaE5oc3RlMlJyMD0%3d%249A4hF_YAuvQ5obgVAqNKPCYcEjKensW4IQMovwHtwkF4VYPoHbKxJw!!&amp;autoLogin=0">基于文本及符号密度的网页正文提取方法</a>》</p>
<p>我的 rust 代码例子: <a href="https://github.com/x956606865/test-extract">https://github.com/x956606865/test-extract</a></p>
<p>另一位大佬用python写的更牛逼的版本:  <a href="https://github.com/kingname/GeneralNewsExtractor">https://github.com/kingname/GeneralNewsExtractor</a></p>
<p>Link:<a href="https://www.notion.so/aj0k3r/2127bd615e034209b818875d2fcec664">https://www.notion.so/aj0k3r/2127bd615e034209b818875d2fcec664</a></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[[译]Node v11 中定时器和微指令的新变化]]></title>
        <id>https://conceal.name/post/yi-node-v11-zhong-ding-shi-qi-he-wei-zhi-ling-de-xin-bian-hua</id>
        <link href="https://conceal.name/post/yi-node-v11-zhong-ding-shi-qi-he-wei-zhi-ling-de-xin-bian-hua">
        </link>
        <updated>2019-03-04T11:59:34.000Z</updated>
        <summary type="html"><![CDATA[<p>本文是我之前关于  Node.js  事件循环的系列文章的简短跟进。在之前的系列文章中，我详细讨论了Timers，setImmediate，process.nextTick，Promises等等。</p>
]]></summary>
        <content type="html"><![CDATA[<p>本文是我之前关于  Node.js  事件循环的系列文章的简短跟进。在之前的系列文章中，我详细讨论了Timers，setImmediate，process.nextTick，Promises等等。</p>
<!-- more -->
<p>但是，自 Node.js  v11.0.0 起，对 setTimeout，setImmediate，process.nextTick 和Promises 的行为进行了一些重大更改。在本文中，我将讨论这些新的更改以及 Node &lt; v11.0.0 和 Node ≥ v11.0.0 之间的功能的一些比较。如果您错过了我之前关于 Node.js事件循环的任何文章，我建议您从以下链接中阅读它们然后返回此处以查看 Node v11.0.0中引入的新更改。</p>
<ul>
<li><a href="https://jsblog.insiderattack.net/event-loop-and-the-big-picture-nodejs-event-loop-part-1-1cb67a182810">Reactor Pattern and the Big Picture</a></li>
<li><a href="https://jsblog.insiderattack.net/timers-immediates-and-process-nexttick-nodejs-event-loop-part-2-2c53fd511bb3">Timers and Immediates</a></li>
<li><a href="https://jsblog.insiderattack.net/promises-next-ticks-and-immediates-nodejs-event-loop-part-3-9226cbe7a6aa">Promises, Next-Ticks and Immediates</a></li>
<li><a href="https://jsblog.insiderattack.net/handling-io-nodejs-event-loop-part-4-418062f917d1">Handling I/O</a></li>
<li><a href="https://jsblog.insiderattack.net/event-loop-best-practices-nodejs-event-loop-part-5-e29b2b50bfe2">Event Loop Best Practices</a></li>
</ul>
<h2 id="详解">详解</h2>
<p>如果您分别在浏览器和 Node.js 中单独运行以下代码，会得到完全相反的结果。</p>
<pre><code>setTimeout(() =&gt; console.log('timeout1'));
setTimeout(() =&gt; {
    console.log('timeout2')
    Promise.resolve().then(() =&gt; console.log('promise resolve'))
});
setTimeout(() =&gt; console.log('timeout3'));
setTimeout(() =&gt; console.log('timeout4'));
</code></pre>
<p>在浏览器中，会输出如下结果:</p>
<pre><code>timeout1
timeout2
promise resolve
timeout3
timeout4
</code></pre>
<p>然而在低于v11.0.0版本的 Node.js 中，会输出以下结果:</p>
<pre><code>timeout1
timeout2
timeout3
timeout4
promise resolve
</code></pre>
<p>在 Node.js 的实现中，当程序横跨 C ++  /  JavaScript 边界时，会在事件循环( event loop )的每个阶段之间执行 process.nextTick 回调和微任务 (  microtasks, 例如，promise回调 )。因此，在执行 Promise 的回调之前，所有定时器的回调都会在事件循环( event loop )的定时器阶段执行，从而产生上述输出。</p>
<p>然而，浏览器和Node之间的这种矛盾的输出已经被讨论了很长一段时间了，并且一个特性（或bug修复）已经登陆 Node.js v11.0.0 用以跟踪浏览器行为。使用此功能，Node.js v11.0.0或更高版本将输出与浏览器输出匹配的以下内容：</p>
<pre><code>timeout1
timeout2
promise resolve
timeout3
timeout4
</code></pre>
<p>请参阅以下 Node v10.15.1 和 Node v11.10.0 之间的比较：</p>
<p><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/ca22d429-50db-40fd-a389-edf611079489/untitled?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAT73L2G45IHKPGFWL%2F20191012%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20191012T120545Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=AgoJb3JpZ2luX2VjEAAaCXVzLXdlc3QtMiJIMEYCIQD7cIh6Ogu3uSmm1LmURDDLOhnyVAok8Yf9cpXGHZoVQgIhALx22mjTlUoVvLPE9xg1gxlR7BpaCyYWaraURiPylDAKKuMDCOn%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMMjc0NTY3MTQ5MzcwIgw2iGxPzJTAHFEAkHoqtwNX1BlUpi6okLhxieOgHtnAkg5hHKP3NwUssG9WM7PvyF1zS3%2F9qXiwRWwCpw9%2Bn3bsiIAzwpHZXGjsnGaQ2gwDzF83bk8gA6TDJ0nMY9FOftyxzW7E5nSxyFZYALR1hEEnJOHxsngssr%2B9ahKsSGKzGRVglYVlLQg1GIGIaWUNKZMjyCltOZeAIxV%2F%2FunsgiZmrxs1YqFVJq1fzt1XxMZbxqVo72yA1sC6%2Br2al%2FO7BnMHdHwlYSb4WQ4OsWeQ7fzNG1tnVl0540Idp2hzBhMv5Q84A8i0oNOKMYorj7Ysfv7k2Sg6Cw7bSPTBo%2Fmhfd7Vb%2FMfO%2BY6%2Bv%2FkH5s5GN2YrmpNBEh9%2BhHpEUXpQV1dpbhB%2FALWKPv9sV0%2BllFPZu8VKCTovbrwmNXFaHz5UwOtqSgSwEtFIOAhL0CHJNkaAEQ2xZoWVQklvfB3ni3JcBl8VDnsfanulYgmCUDrK%2FgainU4UY9VveReiu%2BBeNMPe3OobJGCCtCy9gy%2BjURt3A4MKNusa7xA3MotuSflIPY827yual90Ud7Cqo6u3O%2FlcuVNh6XnQCXNtf2PTRBq3HMpz%2F310culMKaPhu0FOrMBUzZpowHsAMtb9HgyA4UhHmsH9W%2BSjl%2BkIHHh%2Bp9cmGNXWXvlWz%2FOVIfkPAOvbhCs8lHUZhqvsFG9O4xN%2Bg23MVtrh12dJSjLswXbD39I%2F5Hlt9g6aZH8vmjAB2hP5F0bJaZTz%2F13sxIQrYLQS9u8mQepB3HRHb3VO9mohLDqzNKrncOAkCb7MJJRBzoYs1qgtRHBAnEk%2Fx32iwv12%2FC%2FBb%2BWrS7sSRz%2BeD14gpGODEjAKEI%3D&amp;X-Amz-Signature=41a70cb147d978f47017168b826ca73eccdfd8ef5153e4ab770d277d0c249b99&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename%20%3D%22untitled%22" alt="" loading="lazy"><br>
Different outputs in Node v10 and v11</p>
<p>此更改不仅会影响到 setTimeout，还会影响 setImmediate。让我们尝试在 Node v10 和Node v11 中运行以下代码，看看输出是怎样的:</p>
<pre><code>setImmediate(() =&gt; console.log('immediate1'));
setImmediate(() =&gt; {
    console.log('immediate2')
    Promise.resolve().then(() =&gt; console.log('promise resolve'))
});
setImmediate(() =&gt; console.log('immediate3'));
setImmediate(() =&gt; console.log('immediate4'));
</code></pre>
<p>Node.js v10 和 Node.js v11 明确地给出了两个不同的输出：</p>
<figure data-type="image" tabindex="1"><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/14a4d2e1-5e40-44ce-a5bc-52dd5ffbc8ab/untitled?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAT73L2G45ONFOS75K%2F20191012%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20191012T120533Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=AgoJb3JpZ2luX2VjEP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJGMEQCIFXVh8HY55tza4cXP7A8AAAasLjdsPmkOAzSmAHeqJn1AiBf14AV8z6WeXTfPCQJLxJpFo%2BbQPHM0jDTRECHkWDLEyrjAwjo%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F8BEAAaDDI3NDU2NzE0OTM3MCIMW0PS2PjOwTS1YDQTKrcDyerVOXeZZ8oqjMXH3z%2FAIWjy6Ebv2mBzdPxqAv0DNrNbhJ9GBBndQ8NHn3oO9U9UgJzId4CTKoWagYRY%2FVCBLFH56%2BtOb4RVB80fJG%2FwrM0S6riX%2BZPIE0LzzPGBbi%2BUhjMOqwTycgw8gNlIYYJOiVaKIOytLKqk18YThdwr48arh9rKyZ4vJYAWz7fXRSZptkDPtsRnqWDH2Ns7Jlen%2Bn9ske3bkrY8WOl7usxRO8PCwrcWW%2By2qf8zFekZBMRNCSUNdtMqpBDq4pXP73X0hQbhNg%2BZIAAGXipTPIUZAUYIzK%2FKtIlu0HQ3HnFLE9ebJsHPXbTuV89NTcUi4KHGnY1AzfVmHAfHP%2FS4NtCZkCu9ewO6rGw3OJAP9esozyr9mu6nnHDpGw9r7UMW30I3sMkkgCFZl1oM92o36h4IPJVGDAoAZ8Z6lV%2Fu8T17zpvFGNR2x6Okc5RIZqmz2Grk8Bcpo4cmxj%2FsT9%2Br1DANzBtvZR8dJqjTs2woCbxf5dlPutYMaVCB1WWFD7X4%2Bn9idHq033d9dzUPt4S7p4uX3%2F9uihQATZBdgFOo65MFp%2F3cXMO0G07GHzD69oXtBTq1AeY5bcKG%2Bz3Mg54SBAvFiQ1n%2F3pu220PXsTIaqXvFBKSXUm%2BYBvkYzSGygE0gZu92ZVFhLCVJalSzp%2BwcucqDbLbfrMkeCn%2FQIDHVTpoI6CR%2Fi0ZIqe4e8BgKZ5tOFKV%2B%2F71i6aJ18F0%2FzLR0pXbc0GaeW6E6kJnGxrZwbfWviooJJNXacln6iuvIS%2BUrtoj%2BMsb98E2tSM9UqWpqLcr5sMmc4kkxmyxRLZ3zM51TpHklHFHOho%3D&amp;X-Amz-Signature=ddab24370e2a688e968a080477ad79f98be8f97abd0a23451c6515f4dc54a41a&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename%20%3D%22untitled%22" alt="" loading="lazy"></figure>
<p>如果您替换 Promise.resolve（）然后使用 process.nextTick，则此结果完全相同，因为微任务是在运行 process.nextTick 回调之后才会运行。让我们尝试运行以下代码段：</p>
<pre><code>setImmediate(() =&gt; console.log('timeout1'));
setImmediate(() =&gt; {
    console.log('timeout2')
    process.nextTick(() =&gt; console.log('next tick'))
});
setImmediate(() =&gt; console.log('timeout3'));
setImmediate(() =&gt; console.log('timeout4'));
</code></pre>
<p>上述脚本在 Node.js v10 和 Node.js  v11 中的输出如下：</p>
<figure data-type="image" tabindex="2"><img src="https://s3.us-west-2.amazonaws.com/secure.notion-static.com/b84ac947-af7a-446b-a959-23db4f52ab10/untitled?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=ASIAT73L2G45CXUAYZWA%2F20191012%2Fus-west-2%2Fs3%2Faws4_request&amp;X-Amz-Date=20191012T120446Z&amp;X-Amz-Expires=86400&amp;X-Amz-Security-Token=AgoJb3JpZ2luX2VjEP%2F%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEaCXVzLXdlc3QtMiJIMEYCIQCJ7oIbNAtX2v369L2krOhV%2BqbpEY1X9ch3xdsIexPKZwIhAOFAyPEvPdUcrIj61GZOQuNHz6NY5HjrAaXFBq4aED9HKuMDCOj%2F%2F%2F%2F%2F%2F%2F%2F%2F%2FwEQABoMMjc0NTY3MTQ5MzcwIgxf5QY9SHTwFz9aY5kqtwPgaV%2Fiw2STipPnG7MzSsSVBeimQQ4o2L%2FUC0pVw9mohITvRqsYbMhMGm%2FQ9qKqyYvmKUDolG4A8xxEZOynbBoSKiicwU6DYpEHqjqCTpkjqSCBSxaG9uyLXJo2YQzbn3oQ0F3aLgYKh8Xmj6c75Rzkk3fAufTkBQcs%2Fe0LJOr9ptInNHMzstRHYlNTUOnF2Spj%2FCXl8%2B0PLUuVhfPrYTi424azWQNL2enqzbb1fpRb9dAxr6z%2FRDjLlmVfNz4vo9ag767%2FRARYSRnhAmKAT6toJafrJsa%2B6F7DoTWf7EIqrk4DrBYinM9XRz96WCX%2FS89QtxQc2yhXua%2BIUZbrajS0ag%2FzJzBRwzmXriSPtp5pvEw9cJwtrdKhiTtnmOqD1iAaTaXDHs6AfP693zHo%2BPrHdZhWAPhKjZnhncUYFpzPsxJPNE69x14J0zBQcJsgALPUhHOKPv4ArOPzzKlwlABkqS%2FPRmGHTWuDxi4Z6NSmsqGfK1ZdmUnFZ7oMmYcZaXgHwNrm6JzO%2FgNFohj27wpTou8G95CzmJqO7n7QiDij7vCMHqHTRR%2BRkuqZ%2Bv2gm1dAiywtXMHNMPLvhe0FOrMB%2BphHhVxJ5lnhblEY1ZVuS17FV1Bomyr5JrPJzESKN%2BEyHmo8VoGSqTNbIvt1h5kcuhC%2FVdxqGYERwOY%2FFrTucQWGvj5cdhgBXuPJokqlRyPTRsiPpQ4oOWuv93HeV1BKFQD05GshSeCVXO87Rjd4gqtmD1ddP2dAJStAio3KxIbB8gnv2DCXgspkncSywBjP78eV2mykGyxvkO5jfp4NilDMLZFd%2FgxRRqn1ecgQC3gFEe4%3D&amp;X-Amz-Signature=7e792e689db5fa9456902102730ca49895426a6a48fd836a492964aace21a178&amp;X-Amz-SignedHeaders=host&amp;response-content-disposition=filename%20%3D%22untitled%22" alt="" loading="lazy"></figure>
<h2 id="这其中发生了什么">这其中发生了什么？</h2>
<p>随着 Node v11 的新改动，nextTick 回调 和 微任务( microtasks )将在每个单独的 setTimeout 和setImmediate 回调之间运行，即使定时器队列或 immediates 队列不为空。就setTimeout 和 Promise 回调而言，Node.js v11中的新改动与浏览器行为相匹配，从而提高了 Node.js 中浏览器JavaScript的可重用性。但是，这一重大变化可能会破坏明确依赖旧行为的现有的 Node.js 应用程序。因此，如果要升级到Node v11或更高版本（最好是下一个LTS v12），您可能需要谨慎考虑。</p>
]]></content>
    </entry>
</feed>